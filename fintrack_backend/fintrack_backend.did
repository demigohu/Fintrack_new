type Account = record { owner : principal; subaccount : opt blob };
type AssetKind = variant { CkBtc; CkEth };
type AssetKind_1 = variant { CkBtc; CkEth };
type BitcoinTransaction = record {
  fee : nat64;
  confirmations : nat32;
  txid : text;
  address : text;
  operation : text;
  timestamp : nat64;
  amount : nat64;
  block_height : nat32;
};
type BtcFeePreview = record {
  estimated_fee_sats : nat64;
  fee_rate_sats_per_vb : nat64;
  estimated_tx_size_vb : nat64;
  change_amount : nat64;
  confirmation_time_estimate : text;
  total_amount_with_fee : nat64;
};
type BtcNetworkInfo = record {
  last_seen_utxo_height : nat32;
  current_block_height : nat32;
};
type BtcTransferRequest = record {
  destination_address : text;
  owner : opt principal;
  amount_in_satoshi : nat64;
};
type BtcTransferResponse = record {
  transaction_id : opt text;
  error : opt text;
  success : bool;
};
type BudgetAccrualPreview = record {
  now_ns : nat64;
  projected_locked_balance : nat;
  projected_available : nat;
  period_start_ns : nat64;
  projected_unlocked : nat;
  period_end_ns : nat64;
};
type BudgetAmountRequirements = record {
  required_user_balance : nat;
  allowance : nat;
  estimated_fee : nat;
};
type BudgetCreateRequest = record {
  asset_kind : AssetKind;
  name : text;
  asset_canister : principal;
  amount_to_lock : nat;
  period_start_ns : nat64;
  period_end_ns : nat64;
};
type BudgetEvent = record {
  kind : BudgetEventKind;
  note : opt text;
  at_time_ns : nat64;
  amount : opt nat;
};
type BudgetEventKind = variant {
  Withdraw;
  LockSucceeded;
  LockFailed;
  PeriodCompleted;
};
type BudgetInfo = record {
  id : text;
  unlocked_so_far : nat;
  status : BudgetStatus;
  decimals : nat32;
  owner : principal;
  name : text;
  locked_balance : nat;
  period_locked : nat;
  next_lock_at_ns : nat64;
  updated_at_ns : nat64;
  next_unlock_at_ns : nat64;
  created_at_ns : nat64;
  available_to_withdraw : nat;
  asset_canister : principal;
  amount_to_lock : nat;
  period_start_ns : nat64;
  period_end_ns : nat64;
};
type BudgetSchedulePreviewItem = record {
  kind : text;
  at_time_ns : nat64;
  amount : nat;
};
type BudgetStatus = variant { Failed; Paused; Active; Archived; Completed };
type BudgetUpdateRequest = record {
  status : opt BudgetStatus;
  name : opt text;
  amount_to_lock : opt nat;
};
type CryptoRates = record {
  btc_to_usd : float64;
  last_updated : nat64;
  eth_to_usd : float64;
  sol_to_usd : float64;
};
type EthFeePreview = record {
  transaction_speed : text;
  base_fee_per_gas : nat;
  max_priority_fee_per_gas : nat;
  estimated_gas_limit : nat;
  max_fee_per_gas : nat;
  total_fee_eth : float64;
  total_fee_wei : nat;
  gas_price : nat;
};
type EthTransferRequest = record {
  destination_address : text;
  owner : opt principal;
  max_priority_fee_per_gas : opt nat;
  max_fee_per_gas : opt nat;
  gas_limit : opt nat;
  amount : nat;
};
type EthTransferResponse = record {
  transaction_hash : opt text;
  error : opt text;
  success : bool;
};
type EthereumNetwork = variant { Mainnet; Local; Sepolia };
type EthereumTransaction = record {
  confirmations : nat32;
  block_number : nat64;
  address : text;
  operation : text;
  timestamp : nat64;
  gas_used : nat64;
  tx_hash : text;
  amount : nat;
  gas_price : nat;
};
type GoalCreateRequest = record {
  asset_kind : AssetKind_1;
  start_ns : nat64;
  name : text;
  initial_amount : opt nat;
  asset_canister : principal;
  amount_to_lock : nat;
  end_ns : nat64;
};
type GoalEvent = record {
  kind : GoalEventKind;
  note : opt text;
  at_time_ns : nat64;
  amount : opt nat;
};
type GoalEventKind = variant {
  Withdraw;
  InitialLock;
  Failed;
  AddFunds;
  TargetReached;
  CliffUnlocked;
};
type GoalInfo = record {
  id : text;
  status : GoalStatus;
  decimals : nat32;
  owner : principal;
  start_ns : nat64;
  name : text;
  locked_balance : nat;
  updated_at_ns : nat64;
  created_at_ns : nat64;
  available_to_withdraw : nat;
  asset_canister : principal;
  amount_to_lock : nat;
  end_ns : nat64;
};
type GoalProgress = record {
  current_locked : nat;
  progress_percentage : float64;
  goal_id : text;
  target_amount : nat;
  is_target_reached : bool;
};
type GoalStatus = variant { Failed; Active; Archived; Completed };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type ICTokenReply = record {
  fee : nat;
  decimals : nat8;
  token_id : nat32;
  chain : text;
  name : text;
  canister_id : text;
  icrc1 : bool;
  icrc2 : bool;
  icrc3 : bool;
  is_removed : bool;
  symbol : text;
};
type IcpTransaction = record {
  to : principal;
  fee : nat;
  token : text;
  block_index : nat64;
  from : principal;
  operation : text;
  timestamp : nat64;
  amount : nat;
};
type InitArg = record { ethereum_network : opt EthereumNetwork };
type KongSwapPreview = record {
  to_token : text;
  from_amount : nat;
  from_token : text;
  mid_price : float64;
  to_amount : nat;
  price : float64;
  lp_fee : nat;
  gas_fee : nat;
  slippage : float64;
};
type KongSwapRequest = record {
  to_token : text;
  from_token : text;
  max_slippage : opt float64;
  referred_by : opt text;
  amount : nat;
};
type KongSwapResponse = record {
  request_id : opt nat64;
  status : opt text;
  from_amount : opt nat;
  tx_id : opt nat64;
  error : opt text;
  to_amount : opt nat;
  success : bool;
  price : opt float64;
  slippage : opt float64;
};
type MarketChartData = record {
  market_caps : vec vec float64;
  total_volumes : vec vec float64;
  prices : vec vec float64;
};
type Outpoint = record { txid : blob; vout : nat32 };
type PoolReply = record {
  lp_token_symbol : text;
  name : text;
  lp_fee_0 : nat;
  lp_fee_1 : nat;
  balance_0 : nat;
  balance_1 : nat;
  address_0 : text;
  address_1 : text;
  symbol_0 : text;
  symbol_1 : text;
  pool_id : nat32;
  price : float64;
  chain_0 : text;
  chain_1 : text;
  is_removed : bool;
  symbol : text;
  lp_fee_bps : nat8;
};
type PriceData = record { timestamp : nat64; price : float64 };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_10 = variant { Ok : BudgetInfo; Err : text };
type Result_11 = variant { Ok : Account; Err : text };
type Result_12 = variant { Ok : vec BudgetEvent; Err : text };
type Result_13 = variant { Ok : BudgetAccrualPreview; Err : text };
type Result_14 = variant { Ok : BudgetAmountRequirements; Err : text };
type Result_15 = variant { Ok : vec BudgetSchedulePreviewItem; Err : text };
type Result_16 = variant { Ok : EthFeePreview; Err : text };
type Result_17 = variant { Ok : EthTransferResponse; Err : text };
type Result_18 = variant { Ok : float64; Err : text };
type Result_19 = variant { Ok : vec PriceData; Err : text };
type Result_2 = variant { Ok : vec nat64; Err : text };
type Result_20 = variant { Ok : MarketChartData; Err : text };
type Result_21 = variant { Ok : CryptoRates; Err : text };
type Result_22 = variant { Ok : vec Transaction; Err : text };
type Result_23 = variant { Ok : UserBalances; Err : text };
type Result_24 = variant { Ok : GoalInfo; Err : text };
type Result_25 = variant { Ok : GoalProgress; Err : text };
type Result_26 = variant { Ok : vec GoalEvent; Err : text };
type Result_27 = variant { Ok : vec PoolReply; Err : text };
type Result_28 = variant { Ok : vec ICTokenReply; Err : text };
type Result_29 = variant { Ok : bool; Err : text };
type Result_3 = variant { Ok : nat64; Err : text };
type Result_30 = variant { Ok : KongSwapPreview; Err : text };
type Result_31 = variant { Ok : KongSwapResponse; Err : text };
type Result_32 = variant { Ok : nat; Err : text };
type Result_33 = variant { Ok : UniswapTxResponse; Err : text };
type Result_4 = variant { Ok : BtcNetworkInfo; Err : text };
type Result_5 = variant { Ok : vec SimplifiedUtxo; Err : text };
type Result_6 = variant { Ok : vec Utxo; Err : text };
type Result_7 = variant { Ok : BtcFeePreview; Err : text };
type Result_8 = variant { Ok; Err : text };
type Result_9 = variant { Ok : BtcTransferResponse; Err : text };
type SimplifiedUtxo = record { confirmations : nat32; hash : text };
type Transaction = record {
  id : TransactionId;
  status : text;
  btc_tx : opt BitcoinTransaction;
  icp_tx : opt IcpTransaction;
  description : text;
  eth_tx : opt EthereumTransaction;
};
type TransactionId = record { chain : text; timestamp : nat64; tx_hash : text };
type TransformArgs = record { context : blob; response : HttpResponse };
type TxRequest = record {
  to : text;
  value : opt nat;
  owner : opt principal;
  data : text;
};
type UniswapTxResponse = record {
  transaction_hash : opt text;
  error : opt text;
  success : bool;
};
type UserBalances = record {
  last_updated : nat64;
  cketh_balance : nat;
  weth_balance : nat;
  btc_native_balance : nat;
  eth_native_balance : nat;
  ckbtc_balance : nat;
  usdc_balance : nat;
};
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
service : (opt InitArg) -> {
  btc_derive_address : (opt principal) -> (Result);
  btc_get_balance : (opt principal, opt blob) -> (Result_1);
  // Returns the 100 fee percentiles measured in millisatoshi/byte for Bitcoin network
  btc_get_current_fee_percentiles : () -> (Result_2);
  btc_get_deposit_address : (opt principal, opt blob) -> (Result);
  btc_get_fee_percentiles : () -> (Result_2);
  btc_get_native_balance : (text) -> (Result_3);
  btc_get_network_info : (opt text) -> (Result_4);
  // Returns the UTXOs of the given Bitcoin address with simplified response (hash and confirmations only)
  btc_get_utxos : (text) -> (Result_5);
  btc_get_utxos_for_address : (text) -> (Result_6);
  btc_preview_fee : (text, nat64, opt principal) -> (Result_7);
  btc_refresh_balance : (opt principal, opt blob) -> (Result_8);
  btc_transfer : (BtcTransferRequest) -> (Result_9);
  budget_create : (BudgetCreateRequest) -> (Result_10);
  budget_create_and_lock : (BudgetCreateRequest) -> (Result_10);
  budget_delete : (text) -> (Result_8);
  budget_get : (text) -> (opt BudgetInfo) query;
  budget_get_escrow_account : (text) -> (Result_11) query;
  budget_list : (opt principal) -> (vec BudgetInfo) query;
  budget_list_by_asset : (opt principal, principal) -> (vec BudgetInfo) query;
  budget_list_events : (text, opt nat32, opt nat32) -> (Result_12) query;
  budget_pause : (text) -> (Result_8);
  budget_preview_accrual : (text) -> (Result_13) query;
  budget_preview_requirements : (principal, AssetKind, nat) -> (Result_14);
  budget_preview_schedule : (text) -> (Result_15) query;
  budget_refresh_accrual : (text) -> (Result_10);
  budget_refresh_accrual_step : (text, opt nat) -> (Result_10);
  budget_required_allowance : (text) -> (Result_1) query;
  budget_required_amounts : (text) -> (Result_14);
  budget_resume : (text) -> (Result_8);
  budget_trigger_lock_now : (text) -> (Result_8);
  budget_update : (text, BudgetUpdateRequest) -> (Result_10);
  budget_withdraw : (text, nat, opt blob) -> (Result_1);
  clear_user_transactions : (principal) -> ();
  eth_estimate_withdrawal_fee : () -> (Result) query;
  // Returns the historical fee data to estimate gas prices for Ethereum transactions
  eth_fee_history : () -> (Result) query;
  eth_get_balance : (opt principal, opt blob) -> (Result_1);
  eth_get_deposit_address : (opt blob) -> (Result);
  eth_get_minter_address : () -> (Result) query;
  eth_get_minter_info : () -> (Result);
  eth_get_native_balance : (opt text) -> (Result_1);
  eth_get_transaction_count : (opt principal, opt text) -> (Result_3) query;
  eth_preview_fee : (text, nat, opt nat) -> (Result_16);
  eth_refresh_balance : (opt blob) -> (Result_8);
  eth_transfer : (EthTransferRequest) -> (Result_17);
  evm_derive_address : (opt principal) -> (Result);
  get_24h_change : (text) -> (Result_18);
  get_crypto_usd_rate : (text) -> (Result_18);
  get_historical_prices : (text, text, nat32) -> (Result_19);
  get_market_chart : (text, text, nat32) -> (Result_20);
  get_rates_summary : () -> (Result_21);
  get_transaction_count : (principal) -> (nat32) query;
  get_transaction_history : (principal, opt nat32, opt nat32) -> (Result_22);
  get_user_balances : (principal) -> (Result_23);
  goals_add_funds : (text, nat) -> (Result_24);
  goals_create_and_lock : (GoalCreateRequest) -> (Result_24);
  goals_get : (text) -> (opt GoalInfo) query;
  goals_get_progress : (text) -> (Result_25) query;
  goals_list : (opt principal) -> (vec GoalInfo) query;
  goals_list_events : (text, opt nat32, opt nat32) -> (Result_26) query;
  goals_refresh : (text) -> (Result_24);
  goals_withdraw : (text, nat) -> (Result_1);
  kongswap_format_token_amount : (nat, text) -> (text) query;
  kongswap_get_current_price : () -> (Result_18) query;
  kongswap_get_pools : () -> (Result_27) query;
  kongswap_get_tokens : () -> (Result_28) query;
  kongswap_is_service_available : () -> (Result_29) query;
  kongswap_parse_token_amount : (text, text) -> (Result_1) query;
  kongswap_preview_swap : (KongSwapRequest) -> (Result_30);
  kongswap_swap_tokens : (KongSwapRequest) -> (Result_31);
  kongswap_swap_tokens_async : (KongSwapRequest) -> (Result_3);
  principal_to_bytes32 : (text) -> (Result) query;
  transform : (TransformArgs) -> (HttpResponse) query;
  uniswap_get_fresh_nonce : (opt principal) -> (Result_3);
  uniswap_get_gas_price : () -> (Result_32);
  uniswap_send_approval_tx : (TxRequest) -> (Result);
  uniswap_send_tx : (TxRequest) -> (Result);
  uniswap_send_tx_with_response : (TxRequest) -> (Result_33);
}
